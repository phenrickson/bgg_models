---
title: "Predicting Upcoming Board Games"
subtitle: "Predictive Models for BoardGameGeek Ratings"
author: "Phil Henrickson"
date: today
date-format: short
format: 
        html:
                code-fold: true
                code-overflow: scroll
                code-summary: 'Show the code'
                self-contained: true
                toc: true
                fig-align: center
                theme: cerulean
                message: false
editor: source
---
```{r}
#| include: false
#| echo: false
options(knitr.duplicate.label = "allow")
```

```{r}
#| include: false
library(dplyr)
library(bggUtils)
library(tidymodels)
library(vetiver)
library(gert)
library(qs)
library(quarto)
library(targets)
library(tarchetypes)

# authenticate
googleCloudStorageR::gcs_auth(json_file = Sys.getenv("GCS_AUTH_FILE"))

# set bucket
googleCloudStorageR::gcs_global_bucket("bgg_models")

# src
tar_source("src")

# load in objects
tar_load(valid_predictions)
tar_load(valid_metrics)
tar_load(details)
tar_load(tuning_plots)
tar_load(hurdle_threshold)

# model board
model_board =  gcs_model_board()

# games
games = 
    get_games_from_gcp(
        bucket = "bgg_data"
    )

theme_set(bggUtils::theme_bgg())
```


# Pipeline

<!-- # ```{r, results = "asis", echo = FALSE} -->
<!-- #   cat(c("```{mermaid}", targets::tar_mermaid(targets_only = T), "```"), sep = "\n") -->
<!-- # ``` -->


```{r}
#| fig-align: center
#| fig-height: 4
#| message: false
#| warning: false
targets::tar_visnetwork(targets_only =T)

```

# Models

```{r}

averageweight_fit = 
    vetiver_pin_read(
        model_board,
        "bgg_averageweight_"
    )

average_fit = 
    vetiver_pin_read(
        model_board,
        "bgg_average_"
    )

usersrated_fit = 
    vetiver_pin_read(
        model_board,
        "bgg_usersrated_"
    )

hurdle_fit = 
        vetiver_pin_read(
        model_board,
        "bgg_hurdle_"
    )

```

## Assessment

```{r}
#| message: false
#| warning: false
valid_predictions |>
    pivot_outcomes() |>
    left_join(
        games |>
            bggUtils:::unnest_outcomes() |>
            select(game_id, usersrated),
        by = join_by(game_id)
    ) |>
    plot_predictions(alpha = usersrated)+
    theme(legend.title = element_text())

```

```{r}

targets_tracking_details(metrics = valid_metrics,
                         details = details) |>
    select(model, minratings, outcome, any_of(c("rmse", "mae", "mape", "rsq", "ccc"))) |>
    filter(minratings == 25) |>
    select(minratings, everything()) |>
    gt::gt() |>
    gt::tab_options(quarto.disable_processing = T) |>
    gtExtras::gt_theme_espn()

```

## Tuning

::: {.panel-tabset}

### Average Weight

```{r}
#| fig-height: 7
#| results: asis
#| echo: false
tuning_plots[[1]]+
        labs(title = 'Average Weight')

```

### Average Rating

```{r}
#| fig-height: 7
#| results: asis
#| echo: false
tuning_plots[[2]]+
    labs(title = 'Average Rating')

```


### Users Rated

```{r}
#| fig-height: 7
#| results: asis
#| echo: false
tuning_plots[[3]]+
    labs(title = 'Users Rated')

```

:::

## Features

```{r}
#| message: false
#| warning: false
average_plot = 
    average_fit |> 
    extract_vetiver_features() |>
    plot_model_features()+
    labs(title = 'Average Rating')

averageweight_plot = 
    averageweight_fit |> 
    extract_vetiver_features() |>
    plot_model_features()+
    labs(title = 'Average Weight')

usersrated_plot = 
    usersrated_fit |> 
    extract_vetiver_features() |>
    plot_model_features()+
    labs(title = 'Users Rated')

```

::: {.panel-tabset}

### Average Weight

```{r}
#| fig-height: 7
#| results: asis
#| echo: false

averageweight_plot

```

### Average 

```{r}
#| fig-height: 7
#| results: asis
#| echo: false
average_plot

```

### Users Rated

```{r}
#| fig-height: 7
#| results: asis
#| echo: false
usersrated_plot

```

:::

# Predictions

```{r}
#| message: false
#| warning: false
#| include: false

end_train_year = max(average_fit$metadata$user$data$yearpublished) +1

upcoming_ids = 
    games |>
    bggUtils:::unnest_info() |>
    filter(yearpublished > end_train_year) |>
    pull(game_id)

upcoming_games = 
    games |>
    filter(game_id %in% upcoming_ids) |>
    bggUtils::preprocess_bgg_games()

```

```{r}
# predict games
predictions = 
    upcoming_games |>
    impute_averageweight(
        model = averageweight_fit
    ) |>
    predict_hurdle(
        model = hurdle_fit,
        threshold = hurdle_threshold
    ) |>
    predict_bayesaverage(
        average_model = average_fit,
        usersrated_model = usersrated_fit
    )

```

Predictions for games expected to achieve at least 25 ratings.

```{r}

# table
predictions |>
    filter(yearpublished >= 2024) |>
    filter(.pred_hurdle_class == 'yes') |>
    select(-starts_with(".pred_hurdle")) |>
    # this goddamn bah humbug game
    filter(game_id != 388225) |>
    predictions_dt(games = games) |>
    add_colors()

```

Probabilities for games on whether they will achieve 25 ratings.

```{r}

predictions |>
    filter(yearpublished >= 2024) |>
    filter(.pred_hurdle_class == 'yes') |>
    arrange(desc(.pred_hurdle_yes)) |>
    filter(!is.na(thumbnail)) |>
    mutate(name = make_hyperlink(make_bgg_link(game_id), 
                                     mytext = paste(name, paste0("(",yearpublished, ")")))) |>
    mutate(Image = make_image_link(thumbnail),
            Game = name,
            Description = stringr::str_trunc(description, width = 150),
            `Pr(Hurdle)` = round(.pred_hurdle_yes, 3),
            Hurdle = hurdle,
            `Ratings` = usersrated,
            .keep = 'none') |>
    DT::datatable(escape=F,
                      rownames = F,
                      extensions = c('Responsive'),
                      class = list(stripe =F),
                      filter = list(position = 'top'),
                      options = list(pageLength = 15,
                                     initComplete = htmlwidgets::JS(
                                         "function(settings, json) {",
                                         paste0("$(this.api().table().container()).css({'font-size': '", '10pt', "'});"),
                                         "}"),
                                     scrollX=F,
                                     columnDefs = list(
                                         list(className = 'dt-center',
                                              visible=T,
                                              targets = c("Image", "Pr(Hurdle)", "Hurdle", "Ratings")
                                         )
                                     )
                      )
        ) 

```